{"version":3,"sources":["components/Header/styles.js","components/Header/index.js","components/SocialBar/styles.js","components/SocialBar/index.js","components/Navbar/styles.js","components/Navbar/index.js","components/Footer/styles.js","components/Footer/index.js","pages/Home/styles.js","pages/Home/index.js","common/styles.js","Routes.js","serviceWorker.js","index.js"],"names":["HeaderWrapper","styled","div","HeaderTitle","Header","href","RightWrapper","IconStyling","SocialBar","NavWrapper","PullOutMenu","PullOutText","Navbar","FooterWrapper","Footer","HomeContent","Home","Container","MainWrapper","ContentWrapper","Routes","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"odAEO,IAAMA,EAAgBC,IAAOC,IAAV,KAKbC,EAAcF,IAAOC,IAAV,KCJXE,EAAS,WACpB,OACE,kBAACJ,EAAD,KACE,uBAAGK,KAAK,KACN,kBAACF,EAAD,uB,ifCLD,IAAMG,EAAeL,IAAOC,IAAV,KAeZK,EAAcN,IAAOC,IAAV,K,mDCXXM,EAAY,WACvB,OACE,kBAACF,EAAD,KACE,kBAACC,EAAD,KACE,uBAAGF,KAAK,8CACN,kBAAC,IAAD,QAGJ,kBAACE,EAAD,KACE,uBAAGF,KAAK,kCACN,kBAAC,IAAD,QAGJ,kBAACE,EAAD,KACE,uBAAGF,KAAK,4CACN,kBAAC,IAAD,U,yiBCnBH,IAAMI,EAAaR,IAAOC,IAAV,KAKVQ,EAAcT,IAAOC,IAAV,KAYXS,EAAcV,IAAOC,IAAV,K,iBCfXU,EAAS,WACpB,OACE,kBAACH,EAAD,KACE,kBAACC,EAAD,KACE,kBAAC,IAAD,MACA,kBAACC,EAAD,gB,gYCPD,IAAME,EAAgBZ,IAAOC,IAAV,KCCbY,EAAS,WACpB,OAAO,kBAACD,EAAD,4B,mSCFF,IAAME,EAAcd,IAAOC,IAAV,KCCXc,EAAO,WAClB,OAAO,kBAACD,EAAD,wB,wmBCFF,IAAME,EAAYhB,IAAOC,IAAV,KAWTgB,EAAcjB,IAAOC,IAAV,KAQXiB,EAAiBlB,IAAOC,IAAV,KCOZkB,EAtBA,WACb,OACE,kBAAC,IAAD,KACE,kBAACH,EAAD,KACE,kBAAC,EAAD,MACA,kBAACC,EAAD,KACE,kBAAC,EAAD,MACA,kBAACC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,SAIN,kBAAC,EAAD,OAEF,kBAAC,EAAD,SCVYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6cfb8ee6.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const HeaderWrapper = styled.div`\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;\n\nexport const HeaderTitle = styled.div`\n  font-family: Pecita;\n  font-size: 22px;\n`;\n","import React from \"react\";\nimport { HeaderTitle, HeaderWrapper } from \"./styles\";\n\nexport const Header = () => {\n  return (\n    <HeaderWrapper>\n      <a href=\"/\">\n        <HeaderTitle>ashivalagar</HeaderTitle>\n      </a>\n    </HeaderWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const RightWrapper = styled.div`\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: column;\n  -webkit-flex-direction: column;\n  position: fixed;\n  right: 0px;\n  width: 50px;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  height: 100%;\n`;\n\nexport const IconStyling = styled.div`\n    font-size:10px\n    padding: 2px;\n    cursor: pointer;\n`;\n","import React from \"react\";\nimport { RightWrapper, IconStyling } from \"./styles\";\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\n\nexport const SocialBar = () => {\n  return (\n    <RightWrapper>\n      <IconStyling>\n        <a href=\"https://www.instagram.com/shivalagar_2410/\">\n          <InstagramIcon />\n        </a>\n      </IconStyling>\n      <IconStyling>\n        <a href=\"https://github.com/ashivalagar\">\n          <GitHubIcon />\n        </a>\n      </IconStyling>\n      <IconStyling>\n        <a href=\"https://www.linkedin.com/in/ashivalagar/\">\n          <LinkedInIcon />\n        </a>\n      </IconStyling>\n    </RightWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const NavWrapper = styled.div`\n  width: 50px;\n  height: 100%;\n`;\n\nexport const PullOutMenu = styled.div`\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: row;\n  -webkit-flex-direction: row;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  height: 100%;\n`;\n\nexport const PullOutText = styled.div`\n  transform: rotate(-90deg);\n  font-size: 8px;\n  font-weight: 500;\n`;\n","import React from \"react\";\nimport { NavWrapper, PullOutMenu, PullOutText } from \"./styles\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nexport const Navbar = () => {\n  return (\n    <NavWrapper>\n      <PullOutMenu>\n        <MenuIcon />\n        <PullOutText>MENU</PullOutText>\n      </PullOutMenu>\n    </NavWrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const FooterWrapper = styled.div`\n  height: 50px;\n  font-family: Pecita;\n  width: 100%;\n  position: fixed;\n  bottom: 0px;\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: row;\n  -webkit-flex-direction: row;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n`;\n","import React from \"react\";\nimport { FooterWrapper } from \"./styles\";\n\nexport const Footer = () => {\n  return <FooterWrapper>&#169; A Shiv Alagar</FooterWrapper>;\n};\n","import styled from \"styled-components\";\n\nexport const HomeContent = styled.div`\n  display: -webkit-flex;\n  display: flex;\n  flex-direction: row;\n  -webkit-flex-direction: row;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n`;\n","import React from \"react\";\nimport { HomeContent } from \"./styles\";\n\nexport const Home = () => {\n  return <HomeContent>Coming Soon...</HomeContent>;\n};\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  display: -webkit-flex;\n  flex-direction: row;\n  -webkit-flex-direction: row;\n  overflow: hidden;\n  height: 100%;\n  position: fixed;\n  width: 100%;\n`;\n\nexport const MainWrapper = styled.div`\n  display: flex;\n  display: -webkit-flex;\n  flex-direction: column;\n  -webkit-flex-direction: column;\n  position: relative;\n`;\n\nexport const ContentWrapper = styled.div`\n  display: block;\n  display: -webkit-block;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n`;\n","import React from \"react\";\nimport { Switch, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Header, SocialBar, Navbar, Footer } from \"./components\";\nimport { Home } from \"./pages\";\nimport { Container, MainWrapper, ContentWrapper } from \"./common/styles\";\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Container>\n        <Navbar />\n        <MainWrapper>\n          <Header />\n          <ContentWrapper>\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </ContentWrapper>\n          <Footer />\n        </MainWrapper>\n        <SocialBar />\n      </Container>\n    </Router>\n  );\n};\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Routes from \"./Routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}